// GENERATOR
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

// DATASOURCE
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// USER MODEL
model User {
  id             String          @id @default(cuid())
  username       String          @unique
  displayName    String
  email          String?         @unique
  password       String?
  googleId       String?         @unique
  avatarUrl      String?
  bio            String?
  yearOfGrad     Int?
  isAlumni       Boolean         @default(false)
  isMentor       Boolean         @default(false)
  sessions       Session[]
  skills         Skill[]
  projects       Project[]
  internships    Internship[]
  researchPapers ResearchPaper[]
  experiences    Experience[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@map("users")
}

// SKILL MODEL
model Skill {
  id        String   @id @default(cuid())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("skills")
}

// PROJECTS MODEL
model Project {
  id                 String              @id @default(cuid())
  title              String
  description        String
  userId             String
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  studentAttachments StudentAttachment[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  @@map("projects")
}

// INTERNSHIPS MODEL
model Internship {
  id          String   @id @default(cuid())
  title       String
  description String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("internships")
}

// RESEARCH PAPERS MODEL
model ResearchPaper {
  id          String   @id @default(cuid())
  title       String
  description String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("research_papers")
}

// EXPERIENCES MODEL
model Experience {
  id          String   @id @default(cuid())
  title       String
  description String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("experiences")
}

// SESSION MODEL
model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime

  @@map("sessions")
}

// STUDENT ATTACHMENTS MODEL
model StudentAttachment {
  id        String    @id @default(cuid())
  url       String
  projectId String?
  project   Project?  @relation(fields: [projectId], references: [id])
  type      MediaType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("student_attachments")
}

// ENUMS
enum MediaType {
  IMAGE
  VIDEO
  PDF
  DOC
}

// ALUMNI ATTACHMENTS MODEL
model AlumniAttachment {
  id        String    @id @default(cuid())
  url       String
  eventId   String?
  event     Event?    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  newsId    String?
  news      News?     @relation(fields: [newsId], references: [id], onDelete: Cascade)
  type      MediaType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("alumni_attachments")
}

// NEWS MODEL
model News {
  id                String             @id @default(cuid())
  title             String
  content           String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  alumniAttachments AlumniAttachment[]

  @@map("news")
}

// EVENTS MODEL
model Event {
  id                String             @id @default(cuid())
  title             String
  description       String
  date              DateTime
  location          String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  alumniAttachments AlumniAttachment[]

  @@map("events")
}
