// GENERATOR
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

// DATASOURCE
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// USER MODEL
model User {
  id               String            @id @default(cuid())
  username         String            @unique
  displayName      String
  email            String?           @unique
  password         String?
  googleId         String?           @unique
  avatarUrl        String?
  bio              String?
  location         String?
  domain           String?
  fieldOfStudy     String?
  yearOfGrad       Int?
  isAlumni         Boolean           @default(false)
  isMentor         Boolean           @default(false)
  isAdmin          Boolean           @default(false)
  sessions         Session[]
  skills           Skill[]
  projects         Project[]
  internships      Internship[]
  researchPapers   ResearchPaper[]
  experiences      Experience[]
  events           Event[]
  news             News[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  referInternships ReferInternship[]
  referJobs        ReferJob[]

  @@map("users")
}

// SKILL MODEL
model Skill {
  id        String   @id @default(cuid())
  name      String
  User      User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("skills")
}

// PROJECTS MODEL
model Project {
  id          String       @id @default(cuid())
  title       String
  description String
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments Attachment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("projects")
}

// INTERNSHIPS MODEL
model Internship {
  id          String   @id @default(cuid())
  title       String
  description String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("internships")
}

// RESEARCH PAPERS MODEL
model ResearchPaper {
  id          String   @id @default(cuid())
  title       String
  description String
  link        String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("research_papers")
}

// EXPERIENCES MODEL
model Experience {
  id          String   @id @default(cuid())
  title       String
  description String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("experiences")
}

// SESSION MODEL
model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime

  @@map("sessions")
}

// STUDENT ATTACHMENTS MODEL
model Attachment {
  id        String    @id @default(cuid())
  url       String
  projectId String?
  project   Project?  @relation(fields: [projectId], references: [id])
  eventId   String?
  event     Event?    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  newsId    String?
  news      News?     @relation(fields: [newsId], references: [id], onDelete: Cascade)
  type      MediaType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("attachments")
}

// ENUMS
enum MediaType {
  IMAGE
  VIDEO
  PDF
  DOC
}

// NEWS MODEL
model News {
  id          String       @id @default(cuid())
  title       String
  content     String
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments Attachment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("news")
}

// EVENTS MODEL
model Event {
  id               String       @id @default(cuid())
  title            String
  description      String
  date             DateTime
  userId           String
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments      Attachment[]
  location         String
  registrationLink String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@map("events")
}

// REFER INTERNSHIPS MODEL
model ReferInternship {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String
  location    String
  duration    String
  stipend     Int
  workType    String
  category    String[]
  skills      String[]
  applyLink   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("refer_internships")
}

// REFER JOBS MODEL
model ReferJob {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  company   String
  location  String
  workType  String
  jobType   String
  salary    String
  category  String[]
  skills    String[]
  applyLink String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("refer_jobs")
}
